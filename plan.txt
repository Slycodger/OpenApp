drawing should be done through a specific purpose 'drawing' file that handles drawing 3D and 2D, then merging together into a post-processing shader through framebuffers.
2D should be completely seperated from 3D, so that something 3D cannot be 2D and vice versa.
Everything should derive from the 'UniqueType' which will allowing updating.
Updating done a derived chain should be done by having all classes call a virtual function of their name.  So 'UniqueType' creates and calls the function 'uniqueType' as an example.
Scripts should be derived from a 'ScriptBase' class and will call a similar derived update chain.
Pointers for anything derived from or is 'UniqueType' should be the 'UniqueType' pointer, unless through a specific function for that type.
Checking if a 'UniqueType' is really some other derived type should be done through a dynamic_cast check.
Meshes will only be compatable with 3D.
2D will be specialized for rectangles with solid colors or textures, like text.
Text will return a texture with the text on it, in case of 3D text.
Textures will hold their texture, size, and a way to change filtering mode.
Materials will hold either solid values or textures for variables
Image loading should have an imput for what channels are used.
Image loading should have different functions for stuff like normal images, cubemaps, and environment images
A 3D object doesn't mean it needs to have a mesh, just a 3D position.  Same with 2D
Loading models should load the basic types like cameras and lights as well as the object scene
Camera 3D should be seperate from Camera 2D
Multiple cameras should be allowed
All visible types should have a stencil-layer to decide what cameras can view it.
There should be one main camera for both 3D and 2D that gets put on the screen
All cameras will have their own framebuffer.
Make 'drawing' not draw directly to screen or wherever, but instead drawn to all cameras with any matching stencil active through a stencil not direct check.
Merging secondary cameras onto the main should be done through textures connected to the cameras framebuffers.
Make sure cameras can set their own background colors so that secondary can use transparent backgrounds.
All 2D visible types should have an 'index' that will replace the z-coordinate.  It should range from 0-65535, unsigned short.
2D 'index' should be passed into shader to scale onto -1 to 1 range
Make GUI while making everything else, not after
scenes should be swappable, and saves should hold all the files that are loaded and main scene that runs.

***IMPORTANT***
all files -shaders, images, models, anything- should go through a handled system that loads everything chosen to be part of the game.
Nothing loading should go through files, only this set system that handles it all.  When building game all the resources should be put into .pak file[s].
When the game is built a preprocessor flag should be set that changes the loading system to unpack the .pak file and get everything from that.
All things from files should be returned a const unsigned char pointer of the files contents and safe size that can be read.  Implementation of this should then done through the individual areas.